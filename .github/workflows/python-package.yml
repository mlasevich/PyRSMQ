# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "master" ]
    tags:        
      - 'v*' 

  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"] #, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-tests.txt
        pip install -r requirements.txt
        # pip install coveralls
        #python -m pip install flake8 pytest
        #if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    #- name: Lint with flake8
    #  run: |
    #    # stop the build if there are Python syntax errors or undefined names
    #    #flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #    # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #    #flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest --junitxml ./reports/results.xml --cov-config .coveragerc --cov=src
    - name: Install pypa/build
      run: >-
        python3 -m
        pip install
        build
        --user
    - name: Build a binary wheel and a source tarball
      run: python3 -m build
    - name: Store the distribution packages
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/

  publish-to-pypi:
    name: Upload release to PyPI
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/PyRSMQ
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    # retrieve your distributions here
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  # github-release:
  #   if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
  #   name: >-
  #     Sign the Python 🐍 distribution 📦 with Sigstore
  #     and upload them to GitHub Release
  #   needs:
  #   - publish-to-pypi
  #   runs-on: ubuntu-latest

  #   permissions:
  #     contents: write  # IMPORTANT: mandatory for making GitHub Releases
  #     id-token: write  # IMPORTANT: mandatory for sigstore

  #   steps:
  #   - name: Download all the dists
  #     uses: actions/download-artifact@v3
  #     with:
  #       name: python-package-distributions
  #       path: dist/
  #   - name: Sign the dists with Sigstore
  #     uses: sigstore/gh-action-sigstore-python@v2.1.1
  #     with:
  #       inputs: >-
  #         ./dist/*.tar.gz
  #         ./dist/*.whl
  #   - name: Create GitHub Release
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     run: >-
  #       gh release create
  #       '${{ github.ref_name }}'
  #       --repo '${{ github.repository }}'
  #       --notes ""
  #   - name: Upload artifact signatures to GitHub Release
  #     env:
  #       GITHUB_TOKEN: ${{ github.token }}
  #     # Upload to GitHub Release using the `gh` CLI.
  #     # `dist/` contains the built packages, and the
  #     # sigstore-produced signatures and certificates.
  #     run: >-
  #       gh release upload
  #       '${{ github.ref_name }}' dist/**
  #       --repo '${{ github.repository }}'
